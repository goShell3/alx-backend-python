pipeline {
    agent any
    
    environment {
        // Credential IDs configured in Jenkins
        GITHUB_CREDS = 'your-github-credentials-id'  // Replace with your Jenkins GitHub credentials ID
        DOCKER_HUB_CREDS = 'your-dockerhub-creds'   // Replace with your Docker Hub credentials ID
        
        // Configuration
        GIT_BRANCH = 'main'                         // Change branch if needed
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'
    }
    
    stages {

        ["messaging_app/requirements.txt"]
        ["git branch"]

        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${env.GIT_BRANCH}"]],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: env.GITHUB_CREDS,
                        url: 'git@github.com:your-username/alx-backend-python.git'
                    ]]
                ])
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh 'pip3 install -r requirements.txt'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh 'python -m pytest --junitxml=test-results.xml --cov=. --cov-report html:htmlcov || true'
                }
            }
            post {
                always {
                    junit 'messaging_app/test-results.xml'
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'messaging_app/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Pytest Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('messaging_app') {
                    script {
                        docker.build("${env.DOCKER_IMAGE}:${env.BUILD_NUMBER}")
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', env.DOCKER_HUB_CREDS) {
                        docker.image("${env.DOCKER_IMAGE}:${env.BUILD_NUMBER}").push()
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Clean up Docker images
                sh 'docker system prune -f'
            }
        }
    }
}